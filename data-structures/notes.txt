Data structure Big O:

Singly Linked List
- insertion O(1)
- removal O(n) or O(1) if removing first node
- search O(n)
- access O(n)

Doubly Linked List
- insertion O(1)
- removal O(1)
- search O(n), technically O(n/2) but that simplifies to O(n), faster than SLL
- access O(n), same as searching

Stack
- insertion O(1)
- removal O(1)
- search / access O(n)
  - you woudn't use a stack if searching or access are important

Queue
- insertion O(1)
- removal O(1)
- search / access

Binary Search Tree
- insertion O(log n)
- search O (log n)

Binary Heap
- insert/removal O(log n)

Hash Table
- insertion O(1): on average (w/ even distribution), unless rebalancing
- removal O(1): on average (w/ even distribution), unless rebalancing
- access O(1): on average (w/ even distribution)


Tree traversal applications:

Breadth first search:
- on a taller tree (Ex. tree is as uneven as possible), BFS will take up less space
  (i.e. queue length will be minimized during algorithm)

Depth first search:
- on a wider tree (Ex. tree is as even as possible), DFS will take up less space
  (i.e. queue length will be minimized during algorithm)

- Pre order:
  - export a tree structure so it can be easily reproduced
    (if you re-create it by iterating through the pre order output, you get the same tree back)
- Post order:
  - used to delete the tree: if you removed nodes in order of the postorder output array,
    you would be deleting the tree node by node
- In order:
  - if you want them back in numerical order, duh